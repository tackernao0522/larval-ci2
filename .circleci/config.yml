version: 2.1
jobs:
  build:
    docker:
      - image: circleci/php:7.3-node-browsers
      - image: circleci/postgres:11.6-alpine
        environment:
          POSTGRES_DB: larasns
          POSTGRES_USER: default
          POSTGRES_PASSWORD: secret
    environment:
      APP_ENV: testing
      DB_CONNECTION: pgsql
      DB_HOST: localhost
      DB_PORT: 5432
      DB_DATABASE: larasns
      DB_USERNAME: default
      DB_PASSWORD: secret
    steps:
      - checkout
      - run: sudo composer self-update --1
      - restore_cache:
          key: composer-v1-{{ checksum "./laravel-ci2/composer.lock" }}
      - run: composer install -n --prefer-dist --working-dir=./laravel-ci2/
      - save_cache:
          key: composer-v1-{{ checksum "./laravel-ci2/composer.lock" }}
          paths:
            - ./laravel-ci2/vendor
      - restore_cache:
          key: npm-v1-{{ checksum "./laravel-ci2/package-lock.json" }}
      - run:
          name: npm ci
          command: |
            if [ ! -d ./laravel-ci2/node_modules ]; then
              cd laravel-ci2/; npm ci
            fi
      - save_cache:
          key: npm-v1-{{ checksum "./laravel-ci2/package-lock.json" }}
          paths:
            - ./laravel-ci2/node_modules
      - run: cd laravel-ci2/; npm run dev
      - run:
          name: get ready for postgres
          command: |
            sudo apt-get update
            sudo apt-get install libpq-dev
            sudo docker-php-ext-install pdo_pgsql
            dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: php test
          command: php ./laravel-ci2/vendor/bin/phpunit --configuration=./laravel-ci2/phpunit.xml

  deploy:
    docker:
      - image: circleci/php:7.3-node-browsers
    environment:
      AWS_DEFAULT_REGION: ap-northeast-1

    steps:
      - checkout
      - run: sudo composer self-update --1
      - restore_cache:
          key: composer-no-dev-v1-{{ checksum "./laravel-ci2/composer.lock" }}
      - run: composer install -n --no-dev --prefer-dist --working-dir=./laravel-ci2/
      - save_cache:
          key: composer-no-dev-v1-{{ checksum "./laravel-ci2/composer.lock" }}
          paths:
            - vendor
      - restore_cache:
          key: npm-v1-{{ checksum "./laravel-ci2/package-lock.json" }}
      - run:
          name: npm ci
          command: |
            if [ ! -d ./laravel-ci2/node_modules ]; then
              cd laravel-ci2/; npm ci
            fi
      - save_cache:
          key: npm-v1-{{ checksum "./laravel-ci2/package-lock.json" }}
          paths:
            - ./laravel-ci2/node_modules
      - run: cd laravel-ci2/; npm run prod
      - run:
          name: archive artifacts
          command: cd laravel-ci2/; zip -ryq laravel-ci.zip .
      - aws-cli/install
      - run:
          name: upload artifacts to s3
          command: cd laravel-ci2/; aws s3 cp laravel-ci.zip s3://${AWS_S3_BUCKET_NAME}
      - run:
          name: deploy to prod
          command: |
            aws deploy create-deployment \
            --application-name laravel-ci2 \
            --deployment-group-name laravel-ci2 \
            --s3-location bucket=${AWS_S3_BUCKET_NAME},key=laravel-ci.zip,bundleType=zip
  deploy_tmp:
    docker:
      - image: circleci/php:7.3-node-browsers
    steps:
      - checkout
      - add_ssh_keys
      - run:
          name: deploy to prod
          command: |
            echo -e "Host git-codecommit.*.amazonaws.com\n   User ${AWS_SSH_KEY_ID}\n   StrictHostKeyChecking no" > ${HOME}/.ssh/config
            git push ssh://git-codecommit.ap-northeast-1.amazonaws.com/v1/repos/laravel-ci2
orbs:
  aws-cli: circleci/aws-cli@1.0.0
workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - deploy_tmp:
          requires:
            - build
          filters:
            branches:
              only:
                - master
